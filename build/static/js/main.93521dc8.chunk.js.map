{"version":3,"sources":["Images/headshot.jpg","Images/logo.png","Images/anagram.png","Images/proof.png","About/About.js","Navbar/Navbar.js","Landing/Landing.js","Projects/Projects.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","About","react_default","a","createElement","className","src","Headshot","alt","id","Component","Navbar","NavLink","to","Logo","href","Landing","anagramPic","require","proofPic","Projects","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","e","console","log","target","name","setState","anagram","proof","state","itemStyle","itemLink","itemDescription","backgroundImage","style","App","src_Navbar_Navbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93521dc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot.7ef55747.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.f6107c5d.png\";","module.exports = __webpack_public_path__ + \"static/media/anagram.4e452349.png\";","module.exports = __webpack_public_path__ + \"static/media/proof.511c806e.png\";","import React, { Component } from \"react\";\nimport \"./About.css\";\nimport Headshot from \"../Images/headshot.jpg\";\nclass About extends Component {\n  render() {\n    return (\n      <div className=\"aboutMain\">\n        <div className=\"aboutWrapper\">\n          <img src={Headshot} alt=\"headshot\" id=\"headshot\" />\n\n          <div className=\"textWrapper\">\n            <p className=\"aboutText\">\n              I'm a full-stack web developer and veteran looking to join a\n              people-oriented team that strives to make an impact on the world.\n              My background in both military service and non-profit work has\n              made me passionate about affecting real change for the world, as\n              well as working in driven, goal-oriented workplaces where the\n              outcome improves people's lives\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./Navbar.css\";\nimport Logo from \"../Images/logo.png\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div id=\"navBarMain\">\n        {/* Logo picture will be NavLink  for Landing component */}\n\n        <NavLink className=\"navLinks\" to=\"about\">\n          About Me\n        </NavLink>\n\n        <NavLink className=\"navLinks\" to=\"projects\">\n          Projects\n        </NavLink>\n\n        {/* <NavLink to=\"contact\" activeStyle={{ color: \"white\" }}>\n                Contact \n              </NavLink> */}\n\n        <NavLink to=\"/\">\n          <img src={Logo} className=\"logo\" alt=\"logo\" />\n        </NavLink>\n\n        <a\n          className=\"navLinks\"\n          href=\"https://www.linkedin.com/in/felix-sawicki-01b80293\"\n        >\n          LinkedIn\n        </a>\n\n        <a className=\"navLinks\" href=\"https://github.com/FMSawicki\">\n          GitHub\n        </a>\n      </div>\n    );\n  }\n}\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./Landing.css\";\n\nclass Landing extends Component {\n  render() {\n    return (\n      <div className=\"body\">\n        <div className=\"landingText\">\n          <h2 className=\"landingHead\">\n            Web Development by <br /> Felix Sawicki\n          </h2>\n          <p className=\"description\">\n            Veteran || Full-Stack Developer || Volunteer\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Landing;\n","import React, { Component } from \"react\";\nimport \"./Projects.css\";\n\nvar anagramPic = require(\"../Images/anagram.png\");\nvar proofPic = require(\"../Images/proof.png\");\n\nclass Projects extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { anagram: false, proof: true };\n  }\n  onClick = e => {\n    console.log([e.target.name]);\n    if (e.target.name !== \"anagram\") {\n      this.setState({ anagram: false });\n    } else {\n      this.setState({\n        anagram: true\n      });\n    }\n    if (e.target.name !== \"proof\") {\n      this.setState({ proof: false });\n    } else {\n      this.setState({\n        proof: true\n      });\n    }\n  };\n\n  render() {\n    let itemStyle;\n    let itemLink;\n    let itemDescription;\n\n    if (this.state.anagram === true) {\n      itemStyle = {\n        backgroundImage: \"url(\" + anagramPic + \")\"\n      };\n      itemLink = \"\";\n\n      itemDescription =\n        \"This app takes text input, sends a fetch request to an API which returns its closest match to an anagram.\";\n    }\n    if (this.state.proof === true) {\n      itemStyle = {\n        backgroundImage: \"url(\" + proofPic + \")\"\n      };\n      itemLink = \"\";\n\n      itemDescription =\n        \"This Webpage has been commissioned by Proof Technology LLC, an MSP providing IT services\";\n    }\n\n    return (\n      <div className=\"projectMain\">\n        <div className=\"sidebar\">\n          <h3 className=\"projectH3\">Projects</h3>\n          <ul>\n            <li>\n              <button\n                className=\"sideName\"\n                name=\"proof\"\n                id=\"proofButton\"\n                onClick={this.onClick}\n              >\n                Proof Technology Webpage\n              </button>\n            </li>\n            <li>\n              <button\n                className=\"sideName\"\n                name=\"anagram\"\n                id=\"anagramButton\"\n                onClick={this.onClick}\n              >\n                Anagram Generator\n              </button>\n            </li>\n          </ul>\n        </div>\n        <div className=\"mainItem\">\n          <a href={itemLink} className=\"itemImage grow\" style={itemStyle} />\n          <p className=\"projectText\">{itemDescription}</p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Projects;\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport About from \"../About/About\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Landing from \"../Landing/Landing\";\nimport Projects from \"../Projects/Projects\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"navbarMain\">\n          <Navbar />\n        </header>\n        <div className=\"App-div\">\n          <Switch>\n            <Route exact path=\"/\" component={Landing} />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/projects\" component={Projects} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}